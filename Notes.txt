import React from 'react';
import {connect} from 'react-redux';
import {compose} from "redux";
import {addUserToRoom, RemoveUserFromRoom, addMessage, addRoom, 
getRooms, getMessages, setCurrentRoom} from '../../redux/dialogs-reduser';
import {logout} from '../../redux/auth-reduser'
import Rooms from './Rooms';
import s from './Dialogs.module.css'
import MessageArea from './MessageArea/MessageArea'
import { NavLink } from 'react-router-dom';
import withAuthRedirect from '../../hoc/withAuthRedirect';

class DialogsContainer extends React.Component {
    state = {
        timer: null
    }

    componentWillMount() {
        console.log(this.props)
        this.props.getRooms();
        let timerId = setInterval(() => this.props.getRooms(), 2000);
        this.setState({timer: timerId})
    }

    componentWillUnmount () {
        clearInterval(this.state.timer);
        this.setState({timer: ''})
    }

    getRooms = () => this.props.getRooms();

    addRoom = name => this.props.addRoom(name);

    logout = (e) => {
        e.preventDefault();
        this.props.logout();
    }

    //setCurrentRoom = id => this.props.setCurrentRoom(id);

    render () {
        return (
            <div className="dialogs">
                <div className="Navbar">
                    <div className="Logo">
                        <img src="https://img.icons8.com/cotton/2x/chat.png" alt="Logo" />
                        <p>Animal's Chat</p>
                    </div>
                    <div className="Profile dropdown">
                        <div className="dropdown-child">
                            <a onClick={logout} href="#">Log Out</a>
                        </div>
                        <p className="Username">{this.props.userName}</p>
                        <span className="chevron" />
                        <NavLink to="/profile" className="Avatar-profile">
                            <img src="https://gravatar.com/avatar/0296dfca0e02d76686cc9460ea3b1d99.png" alt="Logo" />
                        </NavLink>
                    </div>
                </div>

                <Rooms rooms={this.props.rooms} addRoom={this.addRoom} setCurrentRoom={this.props.setCurrentRoom} />

                {this.props.currentRoomId ? (
                    <div>
                    <MessageArea roomId={this.props.currentRoomId} getMessages={this.props.getMessages} 
                    RemoveUserFromRoom={this.props.RemoveUserFromRoom} addUserToRoom={this.props.addUserToRoom}
                    addMessage={this.props.addMessage} messages={this.props.messages} roomName={this.props.currentRoomName}
                    userName={this.props.userName} setCurrentRoom={this.props.setCurrentRoom} />
                    </div>
                ) : <div className={s.alternativeText}>Choose or create a room</div>}
            </div>
        )
    }
}



let mapStateToProps = (state) => {
    return {
        rooms: state.dialogs.rooms,
        messages: state.dialogs.messages,
        currentRoomId: state.dialogs.currentRoomId,
        currentRoomName: state.dialogs.currentRoomName,
        userName: state.auth.name,
    }
};

export default compose(connect(mapStateToProps, {addUserToRoom, RemoveUserFromRoom, addMessage, addRoom, getRooms, getMessages, setCurrentRoom, logout}), withAuthRedirect)(DialogsContainer)



//withAuthRedirect


/*deleteRoom(id){
    return createInstance(localStorage.token).delete(`/rooms/${id}/delete`);
}*/

/*export const deleteRoom = (id) => () => {
    chatAPI.deleteRoom(id).then().catch(error => {
        console.log(error.response.data.errors);
    });
}*/




/*<div className={s.RoomHat}>
  <p>{this.props.roomName}</p>
    <div id={s.Right}>
      <NewUserToRoomForm addUserToRoom={this.props.addUserToRoom} roomId={this.props.roomId} />
      <div className={s.Leave}>
          <button onClick={RemoveUserFromRoom}>Leave from Room</button>
      </div>
  </div>
</div>*/
{/*<div class="dialogs__header-add-user-form">
                <div class="dialogs__header-add-user-form-wrapper">
                    <div class="dialogs__header-add-user-form-input space">
                        <input type="text" placeholder="UserName"/>
                    </div>
                    <div class="dialogs__header-add-user-form-button space">
                        <button type="submit">ADD</button>
                    </div>
                    <div class="pop-up-buttonX buttonX control-button space" id="buttonXAddUser">
                        <span></span>
                    </div>
                </div>
            </div>*/}


{/*{ this.props.error && <div className={s.inviteError}>
                {this.props.error}</div>}
                <Field placeholder={"Username"} type={"text"} name={"text"} id="invite" component={Input}/>
                <div className={s.InviteButton}>
                    <button type="submit">+ Add people</button>
                    <form onSubmit={this.props.handleSubmit} >
                <div  class="dialogs__header-input-new-user dialogs__header-control-form-item">
                    <Field placeholder={"UserName"} type={"text"} name={"text"} id="invite" component={Input}/>
                </div>
                <button class="dialogs__header-button-add-user dialogs__header-button dialogs__header-control-form-item" type="submit">Add User</button>
            </form>
        </div>*/}
//<form className={s.InputArea} onSubmit={this.handleSubmit} >
              //  <input onChange={this.handleChange} value={this.state.text} type="text" name="input" wrap="hard" placeholder="Type your message here..." autoComplete="off" />
        //    </form>