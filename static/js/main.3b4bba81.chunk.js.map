{"version":3,"sources":["assets/images/wolf.png","assets/images/send.svg","common/FormsControls/FormsControls.module.css","common/Preloader/Preloader.module.css","common/FormsControls/FormsControls.js","utils/validators.js","api/api.js","redux/refresh-token.js","redux/app-reduser.js","redux/auth-reduser.js","components/Login/Login.jsx","components/Register/Register.jsx","components/Profile/Profile.jsx","hoc/withAuthRedirect.js","redux/profile-reduser.js","components/Header/Header.jsx","components/Profile/ProfileContainer.jsx","components/Profile/EditMode/EditForms/EditEmailNameForm.jsx","components/Profile/EditMode/EditForms/EditPasswordForm.jsx","components/Profile/EditMode/EditMode.jsx","components/Profile/EditMode/EditModeContainer.jsx","redux/dialogs-reduser.js","components/Dialogs/addNewRoom.jsx","redux/dialogs-selectors.js","components/Dialogs/MessageArea/NewMessageForm/NewMessageForm.jsx","components/Dialogs/MessageArea/NewUserToRoomForm/NewUserToRoomForm.jsx","components/Dialogs/MessageArea/Header.jsx","components/Dialogs/MessageArea/MessageArea.jsx","components/Dialogs/MessageArea/MessageAreaContainer.jsx","components/Dialogs/Rooms/Rooms.jsx","components/Dialogs/Rooms/RoomsContainer.jsx","components/Dialogs/DialogsConatainer.jsx","common/Preloader/Preloader.js","App.js","serviceWorker.js","redux/redux-store.js","index.js"],"names":["module","exports","FormControl","input","meta","props","child","hasError","touched","error","className","styles","formControl","children","icon","faExclamationCircle","Input","restProps","required","value","minMaxLengthCreator","minLength","maxLength","length","emailValid","email","test","createInstance","token","axios","baseURL","headers","instanceWithoutToken","authAPI","localStorage","get","password","rememberMe","post","name","delete","userAPI","newPassword","patch","chatAPI","id","message","console","log","then","response","setItem","data","initialState","initialized","appReducer","state","action","type","userId","avatar","isAuth","isFetching","toggleGetAuthDataProgress","getAuthUserData","dispatch","getItem","refreshToken","user","payload","setAuthUserData","catch","logout","removeItem","authReducer","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","validate","component","sControls","formSummaryError","for","disabled","to","connect","auth","login","errors","stopSubmit","_error","src","alt","formData","validLengthPassword","validLengthName","RegisterReduxForm","Submit","class","style","justifyContent","register","onClick","mapStateToPropsForRedirect","Component","RedirectComponent","this","React","setUserProfile","profile","toggleGetProfileDataProgress","getUserData","profileReducer","status","Header","logo","userName","compose","withAuthRedirect","ProfileContainer","EditEmailNameReduxForm","size","EmailNameForm","redirect","initialValues","Redirect","setState","updateData","validLength","EditPasswordReduxForm","PasswordForm","updatePassword","old_password","new_password","Edit","passw","addPasssw","deleteUser","oldPassword","EditMode","rooms","messages","currentRoomId","currentRoomName","setCurrentRoom","roomId","roomName","RemoveUserFromRoom","addMessage","getRooms","getMessages","dialogsReducer","AddRoom","activeMobileEdit","toggleActiveMobileEdit","bind","handleChange","e","preventDefault","target","addRoom","onChange","toggleActiveclassNameRooms","getRoomsSelector","createSelector","dialogs","getMessagesSelector","NewMessageForm","text","UNSAFE_componentWillReceiveProps","nextProps","wrap","autoComplete","autoFocus","send","NewUserToRoomForm","reset","activeAddUser","toggleActiveAddUser","NewUserToRoomReduxForm","NewUserToRoom","addUserToRoom","toggleActiveClassRooms","MessagesArea","map","key","username","MessagesAreaContainer","timer","timerId","setInterval","clearInterval","Rooms","r","setRoom","RoomsContainer","DialogsContainer","activeRooms","MessageAreaContainer","Preloader","s","container","classNames","dash","uno","dos","tres","cuatro","App","initializeApp","exact","path","render","Register","withRouter","app","promise","Promise","all","Boolean","window","location","hostname","match","reducerApp","combineReducers","formReducer","store","createStore","undefined","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b4bba81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wolf.bbf5793f.png\";","module.exports = __webpack_public_path__ + \"static/media/send.9ce3a472.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__OoRkY\",\"error\":\"FormsControls_error__lg4Vd\",\"formSummaryError\":\"FormsControls_formSummaryError__Hw1WP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__Cw-a-\",\"dash\":\"Preloader_dash__1h7Qt\",\"uno\":\"Preloader_uno__1TVSB\",\"spin\":\"Preloader_spin__1F8G3\",\"dos\":\"Preloader_dos__AGrhD\",\"spin2\":\"Preloader_spin2__3PLto\",\"tres\":\"Preloader_tres__38hsA\",\"spin3\":\"Preloader_spin3__2jk4J\",\"cuatro\":\"Preloader_cuatro__1UU3-\",\"spin4\":\"Preloader_spin4__1HMYg\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faExclamationCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst FormControl = ({input, meta, child, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            { hasError && <span ><FontAwesomeIcon icon={faExclamationCircle}/> {meta.error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\n/*export const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}*/\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}","export const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const minMaxLengthCreator = (minLength, maxLength) => (value) => {\r\n    if (value.length < minLength || value.length > maxLength) {\r\n        return `length should be ${minLength} to ${maxLength}`;\r\n    }\r\n}\r\n\r\nexport const emailValid = (email) => {\r\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)){\r\n        return 'Invalid email address';\r\n    }\r\n}","import * as axios from \"axios\";\r\n\r\nlet createInstance = (token) =>{\r\n    return axios.create({\r\n        baseURL: 'https://animals-chat.herokuapp.com/',\r\n        headers:     {\r\n            \"API-KEY\": \"3deb2104-0a97-4a6b-8b77-4ec1374c2ee9\",\r\n            \"Authorization\" : \"Bearer \" + token\r\n        }\r\n    });\r\n}\r\n\r\nconst instanceWithoutToken = axios.create({\r\n    baseURL: 'https://animals-chat.herokuapp.com/',\r\n    headers:     {\r\n        \"API-KEY\": \"3deb2104-0a97-4a6b-8b77-4ec1374c2ee9\"\r\n    }\r\n});\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return createInstance(localStorage.token).get(`auth/me`);\r\n    },\r\n\r\n    login(email, password, rememberMe) {\r\n        return instanceWithoutToken.post(`auth/login`, { email, password, rememberMe});\r\n    },\r\n    \r\n    logout() {\r\n        return createInstance(localStorage.token).delete(`auth/login`);\r\n    },\r\n\r\n    register(name, email, password){\r\n        return instanceWithoutToken.post(`users/create`, {name, email, password});\r\n    },\r\n\r\n    deleteUser() {\r\n        return createInstance(localStorage.token).delete(`users/delete`);\r\n    },\r\n\r\n    refresh(){\r\n        return createInstance(localStorage.token).post(`refresh`);\r\n    }\r\n}\r\n\r\nexport const userAPI = {\r\n    getProfile() {\r\n        return createInstance(localStorage.token).get(`profile`);\r\n    },\r\n\r\n    updateProfile(name, email, password, newPassword = null) {\r\n        return createInstance(localStorage.token).patch(`profile/update`, {name, email, password, newPassword});\r\n    }\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    addRoom(name) {\r\n        return createInstance(localStorage.token).post(`rooms`, {name});\r\n    },\r\n\r\n    addMessage(id, message) {\r\n        return createInstance(localStorage.token).post(`rooms/${id}/messages`, {message});\r\n    },\r\n\r\n    addUserToRoom(id, name) {\r\n        return createInstance(localStorage.token).post(`rooms/${id}/users/add`, {name});\r\n    },\r\n\r\n    RemoveUserFromRoom(id, name) {\r\n        console.log(name);\r\n        return createInstance(localStorage.token).post(`/rooms/${id}/users/remove`, {name});\r\n    },\r\n\r\n    getRooms() {\r\n        return createInstance(localStorage.token).get(`/rooms`);\r\n    },\r\n\r\n    getMessages(id){\r\n        return createInstance(localStorage.token).get(`/rooms/${id}/messages`);\r\n    }\r\n}","import {authAPI} from \"../api/api\";\r\n\r\nexport default () => {\r\n    authAPI.refresh().then(response => {\r\n        localStorage.setItem(\"token\", response.data.token);\r\n    });\r\n}","import { getAuthUserData } from \"./auth-reduser\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS});\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(initializedSuccess());\r\n    });\r\n}\r\n\r\nexport default appReducer;","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport refreshToken from './refresh-token';\r\nimport { initializedSuccess } from \"./app-reduser\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\nconst TOGGLE_GET_AUTH_DATA_PROGRESS = 'TOGGLE_GET_AUTH_DATA_PROGRESS';\r\nconst LOGOUT = 'LOGOUT';\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    name: null,\r\n    avatar: null,\r\n    isAuth: false,\r\n    isFetching: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case TOGGLE_GET_AUTH_DATA_PROGRESS:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, name, avatar, isAuth) => ({type: SET_USER_DATA, payload: {userId, name, avatar, isAuth}});\r\nexport const toggleGetAuthDataProgress = (isFetching) => ({type: TOGGLE_GET_AUTH_DATA_PROGRESS, isFetching});\r\nexport const logOut = () => ({type: LOGOUT});\r\n\r\nexport const getAuthUserData = () => (dispatch) => {\r\n    if (localStorage.getItem(\"token\")){\r\n        return authAPI.me().then(response => {\r\n            refreshToken();\r\n            let {id, name, avatar} = response.data.user;\r\n            dispatch(setAuthUserData(id, name, avatar, true));\r\n        }).catch(error => {\r\n            console.log(error.response)\r\n        })\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe = false) => (dispatch) => {\r\n    dispatch(toggleGetAuthDataProgress(true));\r\n    authAPI.login(email, password, rememberMe).then(response => {\r\n        localStorage.setItem(\"token\", response.data.token);\r\n        dispatch(toggleGetAuthDataProgress(false));\r\n        dispatch(getAuthUserData());\r\n    }).catch(error => {\r\n        dispatch(toggleGetAuthDataProgress(false));\r\n        let message = error.response.data.errors.length > 0 ? error.response.data.errors[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    });\r\n}\r\n\r\nexport const register = (name, email, password) => (dispatch) => {\r\n    localStorage.removeItem(\"token\");\r\n    dispatch(toggleGetAuthDataProgress(true));\r\n    authAPI.register(name, email, password)\r\n        .then(response => {\r\n            localStorage.setItem(\"token\", response.data.token);\r\n            dispatch(toggleGetAuthDataProgress(false));\r\n            dispatch(getAuthUserData());\r\n        }).catch(error => {\r\n            dispatch(toggleGetAuthDataProgress(false));\r\n            let message = error.response.data.errors.length > 0 ? error.response.data.errors[0] : \"Some error\";\r\n            dispatch(stopSubmit(\"register\", {_error: message}));\r\n        });\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    dispatch(logOut());\r\n    dispatch(initializedSuccess());\r\n    localStorage.removeItem(\"token\");\r\n}\r\n\r\nexport const deleteUser = () => () => {\r\n    authAPI.deleteUser().catch(error =>{console.log(error.response)});\r\n    logout();\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reduser\";\r\nimport {Redirect, NavLink} from \"react-router-dom\";\r\nimport sControls from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport \"./Login.scss\";\r\n\r\n\r\nconst LoginForm = (props) => {\r\n        return( \r\n    <form onSubmit={props.handleSubmit}>\r\n        <div className=\"authorization-registration__input\">\r\n            <Field placeholder={\"Email\"} name={\"email\"} type={\"email\"}\r\n                       validate={[required]}\r\n                       component={Input}/>\r\n        </div>\r\n        <div className=\"authorization-registration__input\">\r\n            <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\r\n                       validate={[required]}\r\n                       component={Input}/>\r\n        </div>\r\n        { props.error && <div className={sControls.formSummaryError}>{props.error}</div>}\r\n        <div className=\"authorization-registration__remember-me\">\r\n            <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"} id=\"remember\" />\r\n            <label for=\"remember\">Remember me</label>   \r\n        </div>\r\n        <div className=\"authorization-registration__buttons\">\r\n            <button disabled={props.isFetching}>Login</button>\r\n            <NavLink to=\"/register\" className=\"authorization-registration__buttons-sign-up beauty-button\">\r\n                Sign Up\r\n            </NavLink>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm =  reduxForm({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/dialogs\"} />\r\n    }\r\n\r\n    return (\r\n        <div className=\"authorization-registration\">\r\n            <div className=\"authorization-registration__logo\">\r\n                <img src=\"https://www.pngkit.com/png/full/373-3738572_pictures-of-animals-animals-for-logo-png.png\" alt=\"wolf logo\"/>\r\n            </div>\r\n            <div className=\"authorization-registration__form\">\r\n                <div className=\"authorization-registration__form-wrapper\">\r\n                    <div className=\"authorization-registration__info\">\r\n                        <h1>Animal's Chat</h1>\r\n                        <p>Welcome Back, Please login to your account.</p>\r\n                    </div>\r\n                    <LoginReduxForm onSubmit={onSubmit} isFetching={props.isFetching} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    isFetching: state.auth.isFetching\r\n})\r\n\r\nexport default connect(mapStateToProps, {login} )(Login);\r\n\r\n//getAuthUserData={props.getAuthUserData}\r\n//getAuthUserData\r\n\r\n/*<div className=\"authorization-registration\">\r\n        <div className=\"authorization-registration__logo\">\r\n            <img src=\"img/wolf.png\" alt=\"wolf logo\">\r\n        </div>\r\n        <div className=\"authorization-registration__form\">\r\n            <div className=\"authorization-registration__form-wrapper\">\r\n                <div className=\"authorization-registration__info\">\r\n                    <h1>Animal's Chat</h1>\r\n                    <p>Welcome Back, Please login to your account.</p>\r\n                </div>\r\n                <form>\r\n                    <div className=\"authorization-registration__input\">\r\n                        <input type=\"email\" placeholder=\"Email\">\r\n                    </div>\r\n                    <div className=\"authorization-registration__input\">\r\n                        <input type=\"password\" placeholder=\"Password\">\r\n                    </div>\r\n                    <div className=\"authorization-registration__remember-me\">\r\n                        <input name=\"rememberMe\" type=\"checkbox\" id=\"remember\" value=\"\">\r\n                        <label for=\"remember\">Remember me</label>   \r\n                    </div>\r\n                    <div className=\"authorization-registration__buttons\">\r\n                        <button>Login</button>\r\n                        <a className=\"authorization-registration__buttons-sign-up beauty-button\" href=\"./registration.html\">Sign Up</a>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n     */\r\n\r\n     /*<form className=\"Main\" onSubmit={props.handleSubmit}>\r\n        <div className=\"Picture\">\r\n            <div className=\"LineGraph\">\r\n            <img src=\"https://www.pngkit.com/png/full/373-3738572_pictures-of-animals-animals-for-logo-png.png\" alt=\"Logo\" />\r\n            </div>\r\n        </div>\r\n        <div className=\"MainForm\">\r\n            <div className=\"MainFormBody\">\r\n                <div className=\"ChatName\">\r\n                    <p>Animal's Chat</p>\r\n                </div>\r\n            <div className=\"Welcome\">\r\n                <p>Welcome Back, Please login to your account.</p>\r\n            </div>\r\n            <div className=\"Inputs\">\r\n            <Field placeholder={\"Email\"} name={\"email\"} type={\"email\"}\r\n                       validate={[required]}\r\n                       component={Input}/><br/>\r\n            <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\r\n                       validate={[required]}\r\n                       component={Input}/><br />\r\n                <div className=\"Remember\">\r\n                <div className=\"RememberMe\">\r\n                    <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"} id=\"remember\" />\r\n                    <label htmlFor=\"remember\">Remember me</label>\r\n                </div>\r\n                { props.error && <div className={sControls.formSummaryError}>\r\n                {props.error}</div>}\r\n                </div>\r\n                <div className=\"LoginRegister\">\r\n                    <button disabled={props.isFetching} className=\"Login\">Login</button>\r\n                <NavLink to=\"/register\" className=\"SignUp\">\r\n                    SignUp\r\n                </NavLink>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    </form>*/","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required, emailValid, minMaxLengthCreator} from \"../../utils/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {register} from \"../../redux/auth-reduser\";\r\nimport {Redirect, NavLink} from \"react-router-dom\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\r\nimport \"./register.scss\"\r\n\r\nconst validLengthPassword = minMaxLengthCreator(6, 47);\r\nconst validLengthName = minMaxLengthCreator(3, 20);\r\n\r\n\r\nconst RegisterForm = (props) => {\r\n    return (\r\n        <form Submit={props.handleSubmit}>\r\n            <div class=\"authorization-registration__input\">\r\n                <Field placeholder={\"Name\"} name={\"name\"} type={\"text\"}\r\n                                    validate={[required, validLengthName]}\r\n                                    component={Input}/>\r\n            </div>\r\n            <div class=\"authorization-registration__input\">\r\n                <Field placeholder={\"Email\"} name={\"email\"} type={\"email\"}\r\n                                    validate={[required, emailValid]}\r\n                                    component={Input}/>\r\n            </div>\r\n            <div class=\"authorization-registration__input\">\r\n            <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\r\n                                validate={[required, validLengthPassword]}\r\n                                component={Input}/>\r\n            </div>\r\n            { props.error && <div className={style.formSummaryError}>{props.error}</div>}\r\n            <div style={{justifyContent: \"center\"}} class=\"authorization-registration__buttons\">\r\n                <button>Sign Up</button>\r\n            </div>\r\n            <NavLink to='/' class=\"authorization-registration__back-to-sign-in\">Already have an account? Sign in.</NavLink>\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nconst RegisterReduxForm =  reduxForm({form: 'register'})(RegisterForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.register(formData.name, formData.email, formData.password);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"authorization-registration\">\r\n            <div className=\"authorization-registration__logo\">\r\n                <img src=\"https://www.pngkit.com/png/full/373-3738572_pictures-of-animals-animals-for-logo-png.png\" alt=\"wolf logo\"/>\r\n            </div>\r\n            <div className=\"authorization-registration__form\">\r\n                <div className=\"authorization-registration__form-wrapper\">\r\n                    <div className=\"authorization-registration__info\">\r\n                        <h1>Animal's Chat</h1>\r\n                        <p>Welcome, Please sign up your account.</p>\r\n                    </div>\r\n                    <RegisterReduxForm onSubmit={onSubmit} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    isFetching: state.auth.isFetching\r\n})\r\n\r\nexport default connect(mapStateToProps, {register} )(Login);\r\n\r\n\r\n        /*<form className=\"Main\" onSubmit={props.handleSubmit}>\r\n            <div className=\"Picture\">\r\n                <div className=\"LineGraph\">\r\n                <img src=\"https://www.pngkit.com/png/full/373-3738572_pictures-of-animals-animals-for-logo-png.png\" alt=\"Logo\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"MainForm\">\r\n                <div className=\"MainFormBodyRegister\">\r\n                    <div className=\"ChatName\">\r\n                        <p>Animal's Chat</p>\r\n                    </div>\r\n                    <div className=\"Welcome\">\r\n                        <p>Welcome, Please sign up your account.</p>\r\n                    </div>\r\n                    <div className=\"Inputs\">\r\n                            <Field placeholder={\"Name\"} name={\"name\"} type={\"text\"}\r\n                                validate={[required, validLengthName]}\r\n                                component={Input}/><br />\r\n                            <Field placeholder={\"Email\"} name={\"email\"} type={\"email\"}\r\n                                validate={[required, emailValid]}\r\n                                component={Input}/><br />\r\n                            <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\r\n                                validate={[required, validLengthPassword]}\r\n                                component={Input}/><br />\r\n                        { props.error && <div className={style.formSummaryError}>\r\n                            {props.error}\r\n                        </div>\r\n                        }\r\n                        <div className=\"SignUpButton\" >\r\n                            <button className=\"Login\" disabled={props.isFetching}>SignUp</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"ComeBack\">\r\n                        <NavLink to='/'>Already have an account? Sign in.</NavLink>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>*/","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Profile.scss';\r\n\r\n\r\nexport default (props) => {\r\n\r\n    let logout = () => props.logout();\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__body\">\r\n                <div className=\"profile__avatar\">\r\n                    <img src={props.avatar} alt=\"ava\"/>\r\n                </div>\r\n                <div className=\"profile__info\">\r\n                    <p className=\"profile__info-name\">User info</p>\r\n                    <div className=\"profile__info-item\">\r\n                        <span>\r\n                            Name:\r\n                        </span>\r\n                        <p>\r\n                            {props.name}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"profile__info-item\"> \r\n                        <span>\r\n                            Email:\r\n                        </span>\r\n                        <p>\r\n                            {props.email}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"profile__buttons\">\r\n                    <NavLink to={'profile/edit'}>Edit Profile</NavLink>\r\n                    <div onClick={logout}>Log Out</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import {userAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport refreshToken from './refresh-token'\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst UPDATE_PROFILE_DATA = 'UPDATE_PROFILE_DATA';\r\nconst TOGGLE_GET_DATA_PROGRESS = 'TOGGLE_GET_DATA_PROGRESS';\r\n\r\nlet initialState = {\r\n    id: null,\r\n    name: null,\r\n    email: null,\r\n    avatar: null,\r\n    isFetching: false\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, \r\n                id: action.profile.id,\r\n                name: action.profile.name,\r\n                email: action.profile.email,\r\n                avatar: action.profile.avatar\r\n            }\r\n        }\r\n\r\n        case UPDATE_PROFILE_DATA: {\r\n            return {\r\n                ...state,\r\n                name: action.profile.name,\r\n                email: action.profile.email\r\n            }\r\n        }\r\n\r\n        case TOGGLE_GET_DATA_PROGRESS:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile});\r\nexport const toggleGetProfileDataProgress = (isFetching) => ({type: TOGGLE_GET_DATA_PROGRESS, isFetching});\r\n\r\n\r\nexport const getUserData = () => (dispatch) => {\r\n    userAPI.getProfile().then(response => {\r\n        refreshToken();\r\n        dispatch(setUserProfile(response.data.user));\r\n    });\r\n}\r\n\r\nexport const updateData = (name, email, password, Redirect) => (dispatch) => {\r\n    dispatch(toggleGetProfileDataProgress(true));\r\n    userAPI.updateProfile(name, email, password).then( () =>{\r\n        refreshToken();\r\n        dispatch(toggleGetProfileDataProgress(false));\r\n        Redirect();\r\n        dispatch(setUserProfile(name, email));\r\n    }).catch(error => {\r\n        refreshToken();\r\n        dispatch(toggleGetProfileDataProgress(false));\r\n        let message = error.response.data.errors.length > 0 ? error.response.data.errors : \"Some error\";\r\n        dispatch(stopSubmit(\"update_user_data\", {_error: message}));\r\n    });\r\n}\r\n\r\nexport const updatePassword = (name, email, oldPassword, newPassword, Redirect) => (dispatch) => {\r\n    dispatch(toggleGetProfileDataProgress(true));\r\n    userAPI.updateProfile(name, email, oldPassword, newPassword).then(() => {\r\n        refreshToken();\r\n        dispatch(toggleGetProfileDataProgress(false));\r\n        Redirect();\r\n        dispatch(setUserProfile(name, email));\r\n    }).catch(error => {\r\n        refreshToken();\r\n        dispatch(toggleGetProfileDataProgress(false));\r\n        let message = error.response.data.errors.length > 0 ? error.response.data.errors[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"update_user_password\", {_error: message}));\r\n    })\r\n}\r\n\r\nexport default profileReducer;","import {connect} from 'react-redux';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\nimport React from 'react';\r\nimport {logout} from '../../redux/auth-reduser'\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Header.scss';\r\nimport logo from '../../assets/images/wolf.png'\r\n\r\nclass Header extends React.Component {\r\n    logout = () => this.props.logout();\r\n\r\n    render (){\r\n        return (            \r\n            <div className=\"header\">\r\n                <div className=\"container\">\r\n                    <div className=\"nav\">\r\n                        <div className=\"header__logo header__item\">\r\n                            <NavLink to='/dialogs'>\r\n                                <div>\r\n                                    <img src={logo} alt=\"logo wolf\"/>\r\n                                </div>\r\n                                <div className=\"header__logo-name header__text\">\r\n                                    Animal's <span>chat</span>\r\n                                </div>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"header__profile header__item\">\r\n                            <NavLink to=\"/profile\">\r\n                                <div className=\"header__profile-name header__text\">\r\n                                    {this.props.userName}\r\n                                </div>\r\n                                <div>\r\n                                    <img src={this.props.avatar} alt=\"ava\"/>\r\n                                </div>\r\n                            </NavLink>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        userName: (state.profile.name === null) ? state.auth.name : state.profile.name,\r\n        avatar: (state.profile.avatar === null) ? state.auth.avatar : state.profile.avatar,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\nexport default compose(connect(mapStateToProps, {logout}), withAuthRedirect)(Header);\r\n\r\n            /*<div>\r\n                <div className=\"Navbar\">\r\n                    <NavLink to='/dialogs'>\r\n                        <div className=\"Logo\">\r\n                            <img src=\"https://www.pngkit.com/png/full/373-3738572_pictures-of-animals-animals-for-logo-png.png\" alt=\"Logo\" />\r\n                            <p>Animal's Chat</p>\r\n                        </div>\r\n                    </NavLink>\r\n                    <NavLink to=\"/profile\" >\r\n                        <div className=\"Profile dropdown\">\r\n                            <div className=\"dropdown-child\">\r\n                                <div onClick={this.logout}>Log Out</div>\r\n                            </div>\r\n                            <p className=\"Username\">{this.props.userName}</p>\r\n                            <div className=\"Avatar-profile\">\r\n                                <img src={this.props.avatar} alt=\"ava\" />\r\n                            </div>\r\n                        </div>\r\n                    </NavLink>\r\n                </div>\r\n            </div>*/\r\n/*\r\n<div class=\"header\">\r\n    <div class=\"container\">\r\n        <div class=\"nav\">\r\n            <div class=\"header__logo header__item\">\r\n                <a href=\"#\">\r\n                    <div>\r\n                        <img src=\"img/wolf.png\" alt=\"\">\r\n                    </div>\r\n                    <div class=\"header__logo-name header__text\">\r\n                        Animal's <span>chat</span>\r\n                    </div>\r\n                </a>\r\n            </div>\r\n            <div class=\"header__profile header__item\">\r\n                <a href=\"#\">\r\n                    <div class=\"header__profile-name header__text\">\r\n                        Profile name\r\n                    </div>\r\n                    <div>\r\n                        <img src=\"https://gravatar.com/avatar/0296dfca0e02d76686cc9460ea3b1d99.png\" alt=\"\">\r\n                    </div>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n*/","import {connect} from 'react-redux';\r\nimport Profile from './Profile';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\nimport React from 'react';\r\nimport {getUserData} from \"../../redux/profile-reduser\"\r\nimport {logout, getAuthUserData} from '../../redux/auth-reduser'\r\nimport Header from '../Header/Header';\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount(){\r\n        this.props.getUserData()\r\n    }\r\n\r\n    //logout = () => this.props.logout();\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Profile id={this.props.id} name={this.props.name} \r\n                email={this.props.email} avatar={this.props.avatar} logout={this.props.logout}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        id: state.profile.id,\r\n        name: state.profile.name,\r\n        email: state.profile.email,\r\n        avatar: state.profile.avatar,\r\n    }\r\n};\r\n\r\nexport default compose(connect(mapStateToProps, {getUserData, logout, getAuthUserData}), withAuthRedirect)(ProfileContainer);","import React from 'react'\r\nimport sControls from \"../../../../common/FormsControls/FormsControls.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {required, emailValid, minMaxLengthCreator} from \"../../../../utils/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport \"../EditMode.scss\";\r\n\r\n\r\nconst validLengthName = minMaxLengthCreator(3, 20);\r\n\r\nconst EditEmailNameForm = (props) => {\r\n    return(\r\n        <form className=\"edit-form__form\" onSubmit={props.handleSubmit} >\r\n            <div className=\"edit-form__form-input\">\r\n            <Field placeholder={\"New name\"} name={\"name\"}\r\n                    validate={[required, validLengthName]}\r\n                    component={Input} size=\"40\"/>\r\n            </div>\r\n            <div className=\"edit-form__form-input\">\r\n                <Field placeholder={\"New email\"} name={\"email\"}\r\n                    validate={[required, emailValid]}\r\n                    component={Input} size=\"40\"/>\r\n            </div>\r\n            <div className=\"edit-form__form-input\">\r\n                <Field placeholder={\"password\"} name={\"password\"} type={\"password\"}\r\n                    validate={[required]}\r\n                    component={Input} size=\"40\"/>\r\n            </div>\r\n            { props.error && <div className={sControls.formSummaryError}>{props.error}</div>}\r\n            <button className=\"edit-form__button\" disabled={props.isFetching}>Save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst EditEmailNameReduxForm =  reduxForm({form: 'update_user_data'})(EditEmailNameForm)\r\n\r\n\r\nclass EmailNameForm extends React.Component {\r\n    state = {\r\n        redirect: false\r\n    }\r\n    \r\n\r\n    initialValues = {\r\n        name: this.props.name,\r\n        email: this.props.email\r\n    }\r\n\r\n    Redirect = () => {\r\n        this.setState({\r\n            redirect: true\r\n        })\r\n    }\r\n\r\n    onSubmit = (formData) => {\r\n        this.props.updateData(formData.name, formData.email, formData.password, this.Redirect);\r\n    }\r\n\r\n    render () {\r\n        \r\n        if (this.state.redirect){\r\n            return <Redirect to={\"/profile\"} />\r\n        }\r\n\r\n        return <div>\r\n            <EditEmailNameReduxForm onSubmit={this.onSubmit} initialValues={this.initialValues} isFetching={this.props.isFetching} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default EmailNameForm;","import React from 'react'\r\nimport sControls from \"../../../../common/FormsControls/FormsControls.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {required, minMaxLengthCreator, emailValid} from \"../../../../utils/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst validLength = minMaxLengthCreator(6, 47);\r\nconst validLengthName = minMaxLengthCreator(3, 20);\r\n\r\nconst EditPasswordForm = (props) => {\r\n\r\n    return(\r\n        <form className=\"edit-form__form\" onSubmit={props.handleSubmit}>\r\n            <div className=\"edit-form__form-input\">\r\n            <Field placeholder={\"New name\"} name={\"name\"}\r\n                    validate={[required, validLengthName]}\r\n                    component={Input} size=\"40\"/>\r\n            </div>\r\n            <div className=\"edit-form__form-input\">\r\n            <Field placeholder={\"New email\"} name={\"email\"}\r\n                    validate={[required, emailValid]}\r\n                    component={Input} size=\"40\"/>\r\n            </div>\r\n            <div className=\"edit-form__form-input\">\r\n            <Field placeholder={\"Current password\"} name={\"old_password\"} type={\"password\"}\r\n                validate={[required, validLength]}\r\n                component={Input} size=\"40\"/>\r\n            </div>\r\n            <div className=\"edit-form__form-input\">\r\n            <Field placeholder={\"New password\"} name={\"new_password\"} type={\"password\"}\r\n                validate={[required, validLength]}\r\n                component={Input} size=\"40\"/>\r\n            </div>\r\n            { props.error && <div className={sControls.formSummaryError}>{props.error}</div>}\r\n            <button className=\"edit-form__button\">Save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst EditPasswordReduxForm =  reduxForm({form: 'update_user_password'})(EditPasswordForm);\r\n\r\nclass PasswordForm extends React.Component {\r\n    state = {\r\n        redirect: false\r\n    }\r\n\r\n    initialValues = {\r\n        name: this.props.name,\r\n        email: this.props.email\r\n    }\r\n\r\n    Redirect = () => {\r\n        this.setState({\r\n            redirect: true\r\n        })\r\n    }\r\n\r\n    onSubmit = (formData) => {\r\n        this.props.updatePassword(formData.name, formData.email, formData.old_password, formData.new_password, this.Redirect);\r\n    }\r\n\r\n\r\n    render () {\r\n\r\n        if (this.state.redirect){\r\n            return <Redirect to={\"/profile\"} />\r\n        }\r\n\r\n        return <div>\r\n            <EditPasswordReduxForm onSubmit={this.onSubmit} initialValues={this.initialValues} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default PasswordForm;","import React from 'react';\r\nimport EmailNameForm from './EditForms/EditEmailNameForm';\r\nimport PasswordForm from './EditForms/EditPasswordForm';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './EditMode.scss';\r\n\r\nexport default class Edit extends React.Component {\r\n\r\n    state = {\r\n        passw: false\r\n    }\r\n\r\n    addPasssw = () => {\r\n        if (!this.passw) {\r\n            this.setState({\r\n                passw: true\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteUser = () => {\r\n        this.props.deleteUser();\r\n        this.props.logout();\r\n    }\r\n\r\n    render (){\r\n        return (<div className=\"edit-form__wrapper\">\r\n            <div className=\"edit-form\">\r\n                <NavLink className=\"edit-form__back-button\" to={'/profile'}>\r\n                    <span></span>\r\n                </NavLink>\r\n                <h1>Edit Mode</h1>\r\n                    {!this.state.passw && <div>\r\n                        <EmailNameForm name={this.props.name} email={this.props.email} updateData={this.props.updateData} />\r\n                        <button className=\"edit-form__button\" onClick={this.addPasssw}>Change password</button>\r\n                        </div>\r\n                    }\r\n                    {this.state.passw && \r\n                        <PasswordForm name={this.props.name} email={this.props.email} updatePassword={this.props.updatePassword} />\r\n                    }\r\n                <div className=\"edit-form__delete-profile-button edit-form__button\" onClick={this.deleteUser}>Delete Profile</div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}","import {getUserData, updateData, updatePassword} from \"../../../redux/profile-reduser\"\r\nimport EditMode from './EditMode'\r\nimport withAuthRedirect from \"../../../hoc/withAuthRedirect\";\r\nimport {connect} from 'react-redux';\r\nimport {compose} from \"redux\";\r\nimport {deleteUser, logout} from '../../../redux/auth-reduser'\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        name: state.profile.name,\r\n        email: state.profile.email,\r\n        isAuth: state.auth.isAuth,\r\n        isFetching: state.profile.isFetching\r\n    }\r\n};\r\n\r\nexport default compose(connect(mapStateToProps, {getUserData, updateData, updatePassword, deleteUser, logout}), withAuthRedirect)(EditMode);","import {chatAPI} from \"../api/api\";\r\nimport refreshToken from './refresh-token';\r\nimport {reset, stopSubmit} from 'redux-form';\r\n\r\nconst SET_ALL_ROOMS = 'SET_ALL_ROOMS';\r\nconst SET_MESSAGES = 'SET_MESSAGES';\r\nconst SET_CURRENT_ROOM = 'SET_CURRENT_ROOM';\r\n\r\nlet initialState = {\r\n    rooms: [],\r\n    messages: [],\r\n    currentRoomId: null,\r\n    currentRoomName: null\r\n};\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_ALL_ROOMS:\r\n                return {\r\n                    ...state,\r\n                    rooms: [...action.rooms]\r\n                };\r\n        case SET_MESSAGES:\r\n                return {\r\n                    ...state,\r\n                    messages: [...action.messages]\r\n                };\r\n        case SET_CURRENT_ROOM:\r\n            return {\r\n                ...state,\r\n                currentRoomId: action.roomId,\r\n                currentRoomName: action.roomName\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAllRooms = (rooms) => ({type: SET_ALL_ROOMS, rooms});\r\nexport const setMessages = (messages) => ({type: SET_MESSAGES, messages});\r\nexport const setCurrentRoom = (roomId, roomName) => ({type: SET_CURRENT_ROOM, roomId, roomName});\r\n\r\n\r\nexport const addUserToRoom = (id, name) => (dispatch) => {\r\n    chatAPI.addUserToRoom(id, name).then( response => {\r\n        refreshToken();\r\n        dispatch(reset(\"newUserToRoom\"));\r\n        }).catch(error => {\r\n        let message = error.response.data.errors.length > 0 ? error.response.data.errors[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"newUserToRoom\", {_error: message}));\r\n    });\r\n};\r\n\r\nexport const RemoveUserFromRoom = (id, name) => () => {\r\n    chatAPI.RemoveUserFromRoom(id, name).then(\r\n        refreshToken()\r\n        ).catch(error => {\r\n        console.log(error.response);\r\n    });\r\n};\r\n\r\nexport const addMessage = (id, message) => () => {\r\n    chatAPI.addMessage(id, message).then(\r\n        refreshToken()\r\n        ).catch(error => {\r\n        console.log(error.response);\r\n    });\r\n};\r\n\r\nexport const addRoom = (name) => () => {\r\n    chatAPI.addRoom(name).then(\r\n        refreshToken()\r\n        ).catch(error => {\r\n        console.log(error.response);\r\n    });\r\n};\r\n\r\nexport const getRooms = () => (dispatch) => {\r\n    chatAPI.getRooms().then(response => {\r\n        dispatch(setAllRooms(response.data));\r\n    }).catch(error => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nexport const getMessages = (id) => (dispatch) => {\r\n    chatAPI.getMessages(id).then(response => {\r\n        dispatch(setMessages(response.data.message));\r\n    }).catch(error => {\r\n        console.log(error.response);\r\n    });\r\n}\r\n\r\nexport default dialogsReducer;","import React from 'react'\r\nimport \"./Dialogs.scss\"\r\n\r\nclass AddRoom extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            activeMobileEdit: false\r\n        };\r\n        this.toggleActiveMobileEdit = this.toggleActiveMobileEdit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        e.preventDefault();\r\n        this.setState({name: e.target.value});\r\n    }\r\n    \r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.addRoom(this.state.name);\r\n        this.toggleActiveMobileEdit();\r\n        this.setState({ name: '' });\r\n    }\r\n\r\n    toggleActiveMobileEdit(){\r\n        this.setState(state => ({\r\n            activeMobileEdit: !state.activeMobileEdit\r\n        }));\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dialogs__create-room\">\r\n                <form className={this.state.activeMobileEdit ? \"dialogs__create-room-form dialogs__create-room-form_active\" : \"dialogs__create-room-form\"} onSubmit={this.handleSubmit}>\r\n                    <div className=\"dialogs__create-room-wrapper\">\r\n                        <div className=\"dialogs__create-room-input space\">\r\n                            <input type=\"text\" value={this.state.name} onChange={this.handleChange} placeholder=\"Enter room name\"/>\r\n                        </div>\r\n                        <div className=\"dialogs__create-room-button space\">\r\n                            <button type=\"submit\">ADD</button>\r\n                        </div>\r\n                        <div onClick={this.toggleActiveMobileEdit} className=\"pop-up-buttonX buttonX control-button space\" id=\"buttonXCreateRoom\">\r\n                            <span></span>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <div className=\"dialogs__create-room-button-sm space\" id=\"createRoomButton\" onClick={this.toggleActiveMobileEdit}>\r\n                    Create room\r\n                </div>\r\n                <div onClick={this.props.toggleActiveclassNameRooms} className=\"dialogs__header-buttonX buttonX control-button space\" id=\"buttonXRooms\">\r\n                    <span></span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddRoom;\r\n\r\n\r\n/*<div classNameName={s.CreateRoom}>\r\n    {!this.state.editMode &&\r\n        <button onClick={ this.activateEditMode.bind(this) }><p>Create Room</p></button>\r\n    }\r\n\r\n    {this.state.editMode &&\r\n        <div classNameName={s.CreateRoomEdit}>\r\n            <input onChange={this.onStatusChange} autoFocus={true} placeholder=\"Room name\"/>\r\n            <div classNameName={s.Buttons}>\r\n                <button onClick={ this.save.bind(this) }>Save</button>\r\n                <button onClick={ this.deactivateEditMode.bind(this) }>Cansel</button>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>*/\r\n\r\n    /*state = {\r\n        editMode: false,\r\n        name: null\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState( {\r\n            editMode: true\r\n        } );\r\n    }*/\r\n\r\n    /*save() {\r\n        this.setState( {\r\n            editMode: false\r\n        } );\r\n        this.props.addRoom(this.state.name);\r\n    }*/\r\n\r\n    /*deactivateEditMode () {\r\n        this.setState( {\r\n            editMode: false\r\n        });\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            name: e.currentTarget.value\r\n        });\r\n    }*/","import { createSelector } from \"reselect\";\r\n\r\nconst getRooms = (state) => {\r\n    return state.dialogs.rooms;\r\n}\r\n\r\nexport const getRoomsSelector = createSelector(getRooms, (rooms) => {\r\n    return rooms;\r\n})\r\n\r\nconst getMessages = (state) => {\r\n    return state.dialogs.messages;\r\n}\r\n\r\nexport const getMessagesSelector = createSelector(getMessages, (messages) => {\r\n    return messages;\r\n})\r\n\r\n/*\r\ncurrentRoomId: state.dialogs.currentRoomId,\r\ncurrentRoomName: state.dialogs.currentRoomName\r\n*/","import React from 'react'\r\nimport '../../Dialogs.scss'\r\nimport send from '../../../../assets/images/send.svg'\r\n\r\n\r\nclass NewMessageForm extends React.Component {\r\n    state = {\r\n        roomId: this.props.roomId,\r\n        text: ''\r\n    };\r\n\r\n    UNSAFE_componentWillReceiveProps = nextProps => {\r\n        this.setState({ roomId: nextProps.roomId });\r\n    };\r\n    \r\n    handleChange = e => {\r\n        e.preventDefault();\r\n        this.setState({ text: e.target.value });\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (this.state.text.length !== 0){\r\n            console.log(\"send \" + this.state.roomId)\r\n            this.props.addMessage(this.props.roomId, this.state.text);\r\n            this.setState({ text: '' });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dialogs__input-message\">\r\n                <form className=\"dialogs__input-message-wrapper\" onSubmit={this.handleSubmit}>\r\n                    <input onChange={this.handleChange} value={this.state.text} type=\"text\" name=\"input\" wrap=\"hard\" placeholder=\"Enter your message...\" autoComplete=\"off\" autoFocus/>\r\n                    <button type=\"submit\">\r\n                        <img src={send} alt=\"\"/>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewMessageForm;","import React from 'react';\r\n//import s from '../../Dialogs.module.css';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../../../common/FormsControls/FormsControls\";\r\n\r\nclass NewUserToRoomForm extends React.Component {\r\n    UNSAFE_componentWillReceiveProps = (nextProps) => {\r\n        if(nextProps.roomId !== this.props.roomId) {\r\n            const { reset } = this.props\r\n            reset();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.activeAddUser ? \"dialogs__header-add-user dialogs__header-add-user_active\" : \"dialogs__header-add-user\"}>\r\n                <form onSubmit={this.props.handleSubmit}>\r\n                    <div className=\"dialogs__header-error-field-wrapper\">\r\n                        { this.props.error && <div className=\"error\">{this.props.error}</div>}\r\n                        <div className=\"dialogs__header-input-new-user dialogs__header-control-form-item\">\r\n                            <Field placeholder={\"UserName\"} type={\"text\"} name={\"text\"} id=\"invite\" component={Input}/>\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"dialogs__header-button-add-user dialogs__header-button dialogs__header-control-form-item\">AddUser</button>\r\n                    <div className=\"pop-up-buttonX buttonX control-button space\" id=\"buttonXAddUser\" onClick={this.props.toggleActiveAddUser}>\r\n                        <span></span>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst NewUserToRoomReduxForm =  reduxForm({form: 'newUserToRoom'})(NewUserToRoomForm)\r\n\r\nconst NewUserToRoom = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.addUserToRoom(props.roomId, formData.text);\r\n    }\r\n\r\n    return <NewUserToRoomReduxForm onSubmit={onSubmit} roomId={props.roomId} activeAddUser={props.activeAddUser} toggleActiveAddUser={props.toggleActiveAddUser}/>\r\n}\r\n\r\nexport default NewUserToRoom;","import React from 'react';\r\nimport NewUserToRoomForm from './NewUserToRoomForm/NewUserToRoomForm'\r\nimport '../Dialogs.scss'\r\n\r\n\r\nclass Header extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      activeAddUser: false\r\n    }\r\n    this.toggleActiveAddUser = this.toggleActiveAddUser.bind(this);\r\n  }\r\n  \r\n  RemoveUserFromRoom = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"in message area\");\r\n    this.props.toggleActiveClassRooms();\r\n    this.props.RemoveUserFromRoom(this.props.roomId, this.props.userName);\r\n    this.props.setCurrentRoom(null, null);\r\n  }\r\n\r\n  toggleActiveAddUser(){\r\n    this.setState(state => ({\r\n      activeAddUser: !state.activeAddUser\r\n    }));\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"dialogs__header\">\r\n        <div onClick={this.props.toggleActiveClassRooms} className=\"dialogs__header-burger control-button\" id=\"buttonBurger\">\r\n            <span></span>\r\n        </div>\r\n        <div className=\"dialogs__header-room-name\">\r\n          {this.props.roomName}\r\n        </div>\r\n        <div className=\"dialogs__header-control-form\">\r\n          <NewUserToRoomForm activeAddUser={this.state.activeAddUser} addUserToRoom={this.props.addUserToRoom} roomId={this.props.roomId} toggleActiveAddUser={this.toggleActiveAddUser}/>\r\n          <div className=\"dialogs__header-settings-sm-menu-wrapper\">\r\n            <div className=\"dialogs__header-settings control-button\">\r\n                <span></span>\r\n            </div>\r\n            <div className=\"dialogs__header-settings-sm-menu-buttons\">\r\n                <button className=\"dialogs__header-button-sm-add-user\" id=\"buttonAddUser\" onClick={this.toggleActiveAddUser}>Add User</button>\r\n                <button onClick={this.RemoveUserFromRoom} className=\"dialogs__header-button-leave dialogs__header-button dialogs__header-control-item\">Leave</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n  }\r\n};\r\n\r\nexport default Header;\r\n\r\n\r\n","import React from 'react';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport '../Dialogs.scss'\r\n\r\nlet MessagesArea = (props) => {\r\n  return(\r\n    <ScrollToBottom className=\"dialogs__messages\" >\r\n        {props.messages.map(message => <div key={message.id} className=\"dialogs__message\">\r\n          <div className=\"dialogs__message-avatar\">\r\n            <img src={message.avatar} alt=\"Avatar\"/>\r\n          </div>\r\n          <div className={(props.userName === message.username) ? \"dialogs__message-text dialogs__my-message\" : \"dialogs__message-text\"}>\r\n            {(props.userName !== message.username) &&  <p>{message.username}</p>}\r\n            {message.message}\r\n          </div>\r\n        </div>)}\r\n    </ScrollToBottom>\r\n  )\r\n}\r\nexport default MessagesArea;\r\n\r\n\r\n\r\n\r\n/*class MessagesArea extends React.Component {\r\n  state = {\r\n    timer: null\r\n  }\r\n\r\n  componentDidMount (){\r\n    let timerId = setInterval(() => this.props.getMessages(this.props.roomId), 500);\r\n    this.setState({timer: timerId});\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    clearInterval(this.state.timer);\r\n    this.setState({timer: ''})\r\n  }\r\n\r\n  getMessages = () => this.props.getMessages(this.props.roomId)\r\n\r\n  RemoveUserFromRoom = () => {\r\n    console.log(\"in message area\")\r\n    this.props.RemoveUserFromRoom(this.props.roomId, this.props.userName);\r\n    this.props.setCurrentRoom(null, null);\r\n  }\r\n\r\n  render () {\r\n    window.onload = function(){\r\n      document.getElementById('scroll').scrollTop = 9999;\r\n    }\r\n    console.log(\"render message area\")\r\n    return(\r\n    <div className={s.RoomBody}>\r\n      <div className={s.RoomHat}>\r\n        <p>{this.props.roomName}</p>\r\n          <div id={s.Right}>\r\n            <NewUserToRoomForm addUserToRoom={this.props.addUserToRoom} roomId={this.props.roomId} />\r\n            <div className={s.Leave}>\r\n                <button onClick={() => this.RemoveUserFromRoom()}>Leave from Room</button>\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <ScrollToBottom className={s.Messages} >\r\n        {this.props.messages.map(message => <div key={message.id} className={(this.props.userName === message.username) ? `${s.Message} ${s.MyMessage}` : s.Message}>\r\n          <div className={s.AvatarMessage}>\r\n            <img src={message.avatar} alt=\"Avatar\" />\r\n          </div>\r\n          <div className={s.TextMessage}>\r\n            {(this.props.userName !== message.username) &&  <h5>{message.username}</h5>}\r\n            <p>{message.message}</p>\r\n          </div>\r\n        </div>)}\r\n      </ScrollToBottom>\r\n      <NewMessageForm roomId={this.props.roomId} addMessage={this.props.addMessage} />\r\n  </div>\r\n  )};\r\n};*/\r\n\r\n","import {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {addUserToRoom, RemoveUserFromRoom, addMessage,\r\ngetRooms, getMessages, setCurrentRoom} from '../../../redux/dialogs-reduser';\r\nimport { getMessagesSelector } from '../../../redux/dialogs-selectors';\r\nimport React from 'react';\r\nimport NewMessageForm from './NewMessageForm/NewMessageForm'\r\nimport  '../Dialogs.scss'\r\nimport Header from './Header'\r\nimport MessagesArea from './MessageArea';\r\n//import ArraysObjectsComparing from '../../../common/ArraysObjectsComparing/ArraysObjectsComparing'\r\n\r\n\r\nclass MessagesAreaContainer extends React.Component {\r\n  state = {\r\n    timer: null\r\n  }\r\n\r\n  componentDidMount (){\r\n    let timerId = setInterval(() => this.props.getMessages(this.props.roomId), 500);\r\n    this.setState({timer: timerId});\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    clearInterval(this.state.timer);\r\n    this.setState({timer: ''})\r\n  }\r\n\r\n  getMessages = () => this.props.getMessages(this.props.roomId)\r\n\r\n\r\n  render () {\r\n    return(\r\n    <div className=\"dialogs__message-area\">\r\n        <Header\r\n                roomName={this.props.roomName} \r\n                addUserToRoom={this.props.addUserToRoom} \r\n                roomId={this.props.roomId} \r\n                RemoveUserFromRoom={this.props.RemoveUserFromRoom}\r\n                setCurrentRoom={this.props.setCurrentRoom}\r\n                userName={this.props.userName}\r\n                toggleActiveClassRooms={this.props.toggleActiveClassRooms}/>\r\n        <MessagesArea \r\n                messages={this.props.messages}\r\n                userName={this.props.userName} />\r\n        <NewMessageForm \r\n                roomId={this.props.roomId} \r\n                addMessage={this.props.addMessage}/>\r\n    </div>\r\n  )};\r\n};\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: getMessagesSelector(state),\r\n        userName: (state.profile.name === null) ? state.auth.name : state.profile.name, \r\n        roomId: state.dialogs.currentRoomId,\r\n        roomName: state.dialogs.currentRoomName\r\n    }\r\n};\r\n\r\nexport default compose(connect(mapStateToProps, {addUserToRoom, RemoveUserFromRoom, addMessage, getRooms, getMessages, setCurrentRoom}))(MessagesAreaContainer);\r\n\r\n/*window.onload = function(){\r\n  document.getElementById('scroll').scrollTop = 9999;\r\n}*/\r\n\r\n/*shouldComponentUpdate(nextProps) {\r\n    return ArraysObjectsComparing(this.props.messages.slice(), nextProps.messages.slice())\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps){\r\n    if (this.props.roomId === nextProps.roomId){\r\n      return false\r\n    }\r\n    return true\r\n  }*/","import React from 'react';\r\nimport '../Dialogs.scss'\r\n\r\nlet Rooms = (props) => {\r\n    let setRoom = (r, e) =>{\r\n        e.preventDefault();\r\n        props.setCurrentRoom(r.id, r.name);\r\n        props.toggleActiveClassRooms();\r\n    }\r\n    \r\n    return(\r\n        \r\n        <div className=\"dialogs__rooms-container\">\r\n            {props.rooms.map( r => {\r\n                return <div className={ (props.roomId === r.id) ? \"dialogs__room dialogs__room_selected\" : \"dialogs__room\" } key={r.id} onClick={(e) => setRoom(r, e)}>{r.name}</div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rooms;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from \"redux\";\r\nimport {setCurrentRoom, getRooms} from '../../../redux/dialogs-reduser';\r\nimport Rooms from './Rooms';\r\nimport { getRoomsSelector } from '../../../redux/dialogs-selectors';\r\n//import ArraysObjectsComparing from \"../../../common/ArraysObjectsComparing/ArraysObjectsComparing\"\r\n\r\nclass RoomsContainer extends React.Component {\r\n    state = {\r\n        timer: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getRooms();\r\n        let timerId = setInterval(() => this.props.getRooms(), 2000);\r\n        this.setState({timer: timerId})        \r\n    }\r\n\r\n    componentWillUnmount () {\r\n        clearInterval(this.state.timer);\r\n        this.setState({timer: ''});\r\n    }\r\n\r\n    getRooms = () => this.props.getRooms();\r\n\r\n    render () {\r\n        return (\r\n            <Rooms \r\n                rooms={this.props.rooms} \r\n                setCurrentRoom={this.props.setCurrentRoom} \r\n                roomId={this.props.roomId} \r\n                toggleActiveClassRooms={this.props.toggleActiveClassRooms}/>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        rooms: getRoomsSelector(state),\r\n        roomId: state.dialogs.currentRoomId\r\n    }\r\n};\r\n\r\nexport default compose(connect(mapStateToProps, {setCurrentRoom, getRooms}))(RoomsContainer);\r\n\r\n    /*shouldComponentUpdate(nextProps) {\r\n        return ArraysObjectsComparing(this.props.rooms.slice(), nextProps.rooms.slice())\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        if ((this.props.roomId === nextProps.roomId)) {\r\n            console.log(\"return false\")\r\n            return false\r\n        }\r\n        console.log(\"return true\")\r\n        return true\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        if (!((this.props.roomId == null) && (nextProps.roomId == null))) {\r\n            console.log(\"return false\")\r\n            return false\r\n        }\r\n        console.log(\"return true\")\r\n        return true\r\n    }*/","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from \"redux\";\r\nimport { RemoveUserFromRoom, addMessage, addRoom, \r\ngetRooms, getMessages, setCurrentRoom} from '../../redux/dialogs-reduser';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport AddRoom from './addNewRoom';\r\nimport Header from '../Header/Header';\r\nimport MessageAreaContainer from './MessageArea/MessageAreaContainer';\r\nimport RoomsContainer from './Rooms/RoomsContainer';\r\nimport './Dialogs.scss'\r\n\r\nclass DialogsContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeRooms: true,\r\n        };\r\n        this.toggleActiveClassRooms= this.toggleActiveClassRooms.bind(this);\r\n    }\r\n\r\n    toggleActiveClassRooms(){\r\n        this.setState(state => ({\r\n            activeRooms: !state.activeRooms\r\n        }));\r\n    }\r\n    \r\n    addRoom = name => this.props.addRoom(name);\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"Dialogs\">\r\n                <Header/>\r\n                <div className=\"container\">\r\n                    <div className=\"dialogs\">\r\n                        <div className={this.state.activeRooms ? \"dialogs__rooms dialogs__rooms_active\" : \"dialogs__rooms\"}>\r\n                            <AddRoom addRoom={this.props.addRoom} toggleActiveClassRooms={this.toggleActiveClassRooms}/>\r\n                            <RoomsContainer toggleActiveClassRooms={this.toggleActiveClassRooms}/>\r\n                        </div>\r\n                    {this.props.currentRoomId ? (\r\n                        <MessageAreaContainer toggleActiveClassRooms={this.toggleActiveClassRooms}/>\r\n                    ) : <div className=\"alternativeText\" onClick={this.toggleActiveClassRooms}>Choose or create a room</div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        userName: (state.profile.name === null) ? state.auth.name : state.profile.name, \r\n        currentRoomId: state.dialogs.currentRoomId,\r\n    }\r\n};\r\n\r\nexport default compose(connect(mapStateToProps, {RemoveUserFromRoom, addMessage, addRoom, getRooms, getMessages, setCurrentRoom}), withAuthRedirect)(DialogsContainer);","import React from 'react';\r\nimport s from \"./Preloader.module.css\"\r\nimport classNames from 'classnames';\r\n\r\nlet Preloader = () => {\r\n    return <div className={s.container}>\r\n        <div className={classNames(s.dash, s.uno)}></div>\r\n        <div className={classNames(s.dash, s.dos)}></div>\r\n        <div className={classNames(s.dash, s.tres)}></div>\r\n        <div className={classNames(s.dash, s.cuatro)}></div>\r\n  </div>\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport './App.scss';\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport Login from './components/Login/Login'\r\nimport Register from'./components/Register/Register'\r\nimport Profile from './components/Profile/ProfileContainer';\r\nimport Edit from './components/Profile/EditMode/EditModeContainer'\r\n//import Dialogs from '../Dialogs/DialogsConatainer';\r\nimport Dialogs from './components/Dialogs/DialogsConatainer'\r\nimport {initializeApp} from './redux/app-reduser'\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport Preloader from './common/Preloader/Preloader';\r\n\r\nclass App extends React.Component{\r\n\r\n  componentDidMount (){\r\n    this.props.initializeApp();\r\n  }\r\n\r\n  render () {\r\n    if (!this.props.initialized) {\r\n      return <Preloader/>\r\n    }\r\n\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <Route exact path='/' render={ () => <Login /> }/>\r\n        <Route exact path='/register' render={ () => <Register /> }/>\r\n        <Route exact path='/profile' render={ () => <Profile /> }/>\r\n        <Route exact path ='/profile/edit' render={() => <Edit /> } />\r\n        <Route exact path ='/dialogs' render={() => <Dialogs /> } />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized\r\n});\r\n\r\nexport default compose(withRouter(connect(mapStateToProps, {initializeApp})(App)));","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { reducer as formReducer } from 'redux-form'\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport authReducer from \"./auth-reduser\";\r\nimport dialogsReducer from \"./dialogs-reduser\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from './profile-reduser';\r\nimport appReducer from './app-reduser'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nlet reducerApp = combineReducers({\r\n    auth: authReducer,\r\n    profile: profileReducer,\r\n    form: formReducer,\r\n    dialogs: dialogsReducer,\r\n    app: appReducer\r\n})\r\n\r\nlet rootReducer = (state, action) => {\r\n    if (action.type === 'LOGOUT') {\r\n        state = undefined;\r\n    }\r\n    return reducerApp(state, action)\r\n}\r\n\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter} from 'react-router-dom'; //BrowserRouter\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/redux-store'\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}